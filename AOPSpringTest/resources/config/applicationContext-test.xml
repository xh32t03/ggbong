<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="       
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
      http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
    
    <!-- 注解支持 -->  	
	<context:annotation-config />

	<!-- 数据库连接池 -->  
    <bean id="dataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
    	<property name="alias"><value>SPTPool</value></property>
        <property name="delegateProperties">
            <value>user=${jdbc.username},password=${jdbc.password}</value>
        </property>
        
        <property name="driver" value="${jdbc.driverClassName}"/>
        <property name="driverUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        
        <!--最少保持的空闲连接数(默认 2 个) -->
		<property name="prototypeCount">
			<value>2</value>
		</property>
		<!--最大激活连接数(默认 5 个),超过了这个连接数,再有请求时,就排在队列中等候,最大的等待请求数由 maximum-new-connections 决定 -->
		<property name="maximumConnectionCount">
			<value>50</value>
		</property>
		<!--默认激活的连接数(默认 2 个) -->
		<property name="minimumConnectionCount">
			<value>3</value>
		</property>
		<!-- 设置连接超时时间 15分钟 -->    
	    <property name="maximumActiveTime" value="900000"/>  
	    
		<!-- 使用前进行测试, 防止数据库重启使用出现异常 -->
    	<property name="testBeforeUse" value="true"/>
    	<!-- 测试连接状态 -->
		<property name="houseKeepingTestSql" value="select CURRENT_DATE"></property> 
    	<property name="simultaneousBuildThrottle" value="50" />
	    
		<property name="trace" value="true"></property>
		<property name="verbose" value="true"></property>
    </bean>
        
	<!-- MyBatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:resources/mybatis/bank/myBatisConfig.xml" />
		<property name="mapperLocations"
			value="classpath:resources/mybatis/*/mapper/*.xml" />
	</bean>
	<bean id="bankSqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		autowire="byName">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	<!-- MyBatis -->

	<!-- 配置事务管理对象 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
		<qualifier value="sptBankTxManager"/>
	</bean>
	<!-- 将所有具有@Transactional注解的Bean自动配置为声明式事务支持 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	 
	<!-- 监听器 -->
	<!-- <bean id="bankStartupListener" class="com.autrade.spt.bank.listener.BankStartupListener"/>
	 -->
	 
	<!-- 自定义的拦截器 -->
	<bean id="methodAdvisor" class="com.autrade.spt.common.interceptor.InjectorManager" />

	<aop:config proxy-target-class="true">
		<aop:pointcut id="baseMethods"
			expression="execution(* com.autrade.spt.*.service..*.*(..))" />
		<aop:advisor advice-ref="methodAdvisor" pointcut-ref="baseMethods" />
	</aop:config>
        
	<!-- 引入Stage固定配置 -->
    <import resource="classpath:resources/config/applicationContext-base.xml" />
    <!-- 引入Master Dao配置 -->
    <import resource="classpath:resources/config/applicationContext-common.xml" />
	<!-- 引入dao层配置 -->
    <import resource="classpath:resources/config/applicationContext-dao.xml" />
    <!-- 引入dxo层配置 -->
    <import resource="classpath:resources/config/applicationContext-dxo.xml" />
    <!-- 引入service层配置 -->
    <import resource="classpath:resources/config/applicationContext-service.xml" />
    <!-- 引入task配置 -->
    <!-- <import resource="classpath:resources/config/applicationContext-task.xml" /> -->
</beans>