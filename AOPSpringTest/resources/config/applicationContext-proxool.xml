<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="       
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
      http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
    
    <!-- 注解支持 -->  	
	<context:annotation-config/>

	<bean id="propertyConfigurer2"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="order" value="2" />
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="ignoreResourceNotFound" value="true" />
		<!-- <property name="location">
			<value>classpath:config/jdbc.properties</value>
		</property> -->
		<property name="locations">  
           <list>  
               <!-- 标准配置 -->  
               <value>classpath*:config/jdbc.properties</value>  
               <!-- 本地开发环境配置 -->  
               <value>classpath*:config/jdbc.properties</value>  
               <!-- 服务器生产环境配置 -->  
               <!-->file:/var/myapp/application.server.properties -->  
           </list>  
       </property>  
	</bean>
	
	<!-- 数据库连接池 -->  
    <bean id="proxoolParentDataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
        <property name="driver" value="${jdbc.driverClassName}"/>
        
		<!--最少保持的空闲连接数(默认 2 个) -->
		<property name="prototypeCount">
			<value>2</value>
		</property>
		<!--最大连接数(默认 5 个),超过了这个连接数,再有请求时,就排在队列中等候,最大的等待请求数由 maximum-new-connections 决定 -->
		<property name="maximumConnectionCount">
			<value>100</value>
		</property>
		<!--最小连接数(默认 2 个) -->
		<property name="minimumConnectionCount">
			<value>5</value>
		</property>
		
		<!-- 使用前进行测试, 防止数据库重启使用出现异常 -->
    	<property name="testBeforeUse" value="true"/>
    	
		<!-- 测试连接状态 -->
		<property name="houseKeepingTestSql" value="select CURRENT_DATE"></property>
		<!-- 间隔15分钟检查所有连接是否需要关闭或创建 -->     
    	<property name="houseKeepingSleepTime" value="900000"/>
	    <!-- 设置连接超时时间 15分钟 -->    
	    <property name="maximumActiveTime" value="900000"/>    
	    <!-- 设定每个连接最长的存在时间 (毫秒级) 默认4小时 -->    
	    <property name="maximumConnectionLifetime" value="14400000" />    
	    <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->   
	    <property name="acquireIncrement" value="5"/>   
	    <!-- 连接池中保留的最小连接数。-->   
	    <property name="minPoolSize" value="5"/>   
	    <!-- 连接池中保留的最大连接数。Default: 15 -->   
	    <property name="maxPoolSize" value="30"/>   
	    <!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->   
	    <property name="initialPoolSize" value="10"/>   
	    <!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->   
	    <property name="maxIdleTime" value="60"/>   
    
		<property name="trace" value="true"></property>
		<property name="verbose" value="true"></property>
    </bean>
    
    <bean id="default" parent="proxoolParentDataSource">    
        <property name="alias"><value>SPTPool-local</value></property>
        <property name="delegateProperties">
            <value>user=${jdbc.username},password=${jdbc.password}</value>
        </property>
        
        <property name="driverUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <bean id="local" parent="proxoolParentDataSource">    
        <property name="alias"><value>SPTPool-local</value></property>
        <property name="delegateProperties">
            <value>user=${local.jdbc.username},password=${local.jdbc.password}</value>
        </property>
        
        <property name="driverUrl" value="${local.jdbc.url}"/>
        <property name="user" value="${local.jdbc.username}"/>
        <property name="password" value="${local.jdbc.password}"/>
    </bean>
    <bean id="server" parent="proxoolParentDataSource">    
        <property name="alias"><value>SPTPool-server</value></property>
        <property name="delegateProperties">
            <value>user=${server.jdbc.username},password=${server.jdbc.password}</value>
        </property>
        
        <property name="driverUrl" value="${server.jdbc.url}"/>
        <property name="user" value="${server.jdbc.username}"/>
        <property name="password" value="${server.jdbc.password}"/>
    </bean>

	<bean id="dataSource" class="com.autrade.stage.commons.MultiDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="default" key="_default"></entry>
				<entry value-ref="local" key="_local"></entry>
				<entry value-ref="server" key="_server"></entry>
			</map>
		</property>
		<!-- 默认数据源 -->
		<property name="defaultTargetDataSource" ref="_default"></property>
	</bean>  

	<!-- MyBatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	  	<property name="dataSource" ref="dataSource" />
	  	<property name="configLocation" value="classpath:resources/mybatis/*/myBatisConfig.xml" />
	  	<property name="mapperLocations" value="classpath:resources/mybatis/*/mapper/*.xml" />
	</bean>
	<bean id="matchSqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		autowire="byName">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	<!-- MyBatis -->
	
	<!-- 配置事务管理对象-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 将所有具有@Transactional注解的Bean自动配置为声明式事务支持 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

	<!-- 自定义的拦截器 -->
	<bean id="methodAdvisor" class="com.autrade.spt.common.interceptor.InjectorManager" />

	<aop:config proxy-target-class="true">
		<!-- 定义在service包或者子包里的任意方法的执行 -->
		<aop:pointcut id="baseMethods"
			expression="execution(* com.autrade.spt.*.service..*.*(..))" />
		<aop:advisor advice-ref="methodAdvisor" pointcut-ref="baseMethods" />
	</aop:config>
        
	<!-- 引入Stage固定配置 -->
    <import resource="classpath:resources/config/applicationContext-base.xml" />
    <!-- 引入Master Dao配置 -->
    <import resource="classpath:resources/config/applicationContext-common.xml" />
	<!-- 引入dao层配置 -->
    <import resource="classpath:resources/config/applicationContext-dao.xml" />
    <!-- 引入dxo层配置 -->
    <import resource="classpath:resources/config/applicationContext-dxo.xml" />
    <!-- 引入service层配置 -->
    <import resource="classpath:resources/config/applicationContext-service.xml" />
    <!-- 引入task配置 -->
    <!-- <import resource="classpath:resources/config/applicationContext-task.xml" /> -->
</beans>