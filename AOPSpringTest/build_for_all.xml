<?xml version="1.0" encoding="UTF-8"?>
<project name="exportAll" basedir="." default="main">
	<property environment="env" />
	<property name="java.lib.dir" value="${env.JAVA_HOME}/lib" />

	<!-- Load properties -->
	<property file="build.properties" />
	
	<!-- 定义classpath -->
	<path id="classpath">
		<!--<fileset dir="lib">
			<include name="**/*.jar" />
		</fileset>-->
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="lib" />
		<pathelement location="classes" />
		<!-- 3rd party Jars -->
		<pathelement path="${env.classpath}" />
		
		<fileset dir="${buildApp.dest}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- 执行target入口init,preparesrc,compile,packStage,packCommon -->
	<target name="main" depends="init,preparesrc,packStage,packCommon">
		<echo level="info">==========Export ${exportJarName}.jar file success.==========</echo>
	</target>
	
	<!-- =================================================================== -->
	<!-- 初始化任务 -->
	<!-- =================================================================== -->
	<target name="init" depends="clean">
		<echo message=">>1.创建文件目录......"/>
		<mkdir dir="${buildApp.dest}" />
		<mkdir dir="${buildWebApp.dest}" />
		
		<mkdir dir="${stage.build.dir}" />
		<mkdir dir="${common.build.dir}" />
		<mkdir dir="${bank.build.dir}" />
		<mkdir dir="${master.build.dir}" />
		<mkdir dir="${match2.build.dir}" />
		<mkdir dir="${information.build.dir}" />
		
		<mkdir dir="${stage.build.src}" />
		<mkdir dir="${common.build.src}" />
		<mkdir dir="${bank.build.src}" />
		<mkdir dir="${master.build.src}" />
		<mkdir dir="${match2.build.src}" />
		<mkdir dir="${information.build.src}" />
		
		<mkdir dir="${stage.build.dest}" />
		<mkdir dir="${common.build.dest}" />
		<mkdir dir="${bank.build.dest}" />
		<mkdir dir="${master.build.dest}" />
		<mkdir dir="${match2.build.dest}" />
		<mkdir dir="${information.build.dest}" />
	</target>
	
	<!-- =================================================================== -->
	<!-- 清除临时文件-->
	<!-- =================================================================== -->
	<target name="clean">
		<echo message=">>2.清除临时文件......"/>
		<!--
		<delete verbose="true" includeEmptyDirs="true">
			<fileset dir="${build.dir}" includes="**/*"/>   
		</delete>
		-->
		<delete dir="${build.app.dir}" />
	</target>
		
	<!-- =================================================================== -->
	<!-- 准备源文件-->
	<!-- =================================================================== -->
	<target name="preparesrc" depends="clean" description="prepare the source files">
		<echo message=">>3.准备源文件......"/>
		<!-- copy stage src files -->
		<copy todir="${stage.build.src}" overwrite="yes">
			<fileset dir="${stage.src.dir}">
				<exclude name="**/*.bak" />
				<exclude name="**/.svn" />
			</fileset>
			<!--<fileset dir="${config.dir}" excludes="**/*.bak" />-->
		</copy>
		
		<!-- copy common src files -->
		<copy todir="${common.build.src}" overwrite="yes">
			<fileset dir="${common.src.dir}">
				<exclude name="**/*.bak" />
				<exclude name="**/.svn" />
			</fileset>
		</copy>
		
		<!-- copy bank src files -->
		<copy todir="${bank.build.src}" overwrite="yes">
			<fileset dir="${bank.src.dir}">
				<exclude name="**/*.bak" />
				<exclude name="**/.svn" />
			</fileset>
		</copy>
		
		<!-- copy master src files -->
		<copy todir="${master.build.src}" overwrite="yes">
			<fileset dir="${master.src.dir}">
				<exclude name="**/*.bak" />
				<exclude name="**/.svn" />
			</fileset>
		</copy>
		
		<!-- copy match2 src files -->
		<copy todir="${match2.build.src}" overwrite="yes">
			<fileset dir="${match2.src.dir}">
				<exclude name="**/*.bak" />
				<exclude name="**/.svn" />
			</fileset>
		</copy>
		
		<!-- copy match2 src files -->
		<copy todir="${information.build.src}" overwrite="yes">
			<fileset dir="${information.src.dir}">
				<exclude name="**/*.bak" />
				<exclude name="**/.svn" />
			</fileset>
		</copy>
	</target>

	<!-- =================================================================== -->
	<!-- 编译Stage | 打包成Stage.jar | 发布Stage-->
	<!-- =================================================================== -->
	<target name="compileStage" depends="preparesrc" description="compile the stage source files">
		<echo message=">>4.开始编译Stage......"/>
		<mkdir dir="${stage.build.dest}" />
		<javac srcdir="${stage.build.src}" destdir="${stage.build.dest}" target="${_target}" debug="${_debug}" encoding="${_encoding}" deprecation="${_deprecation}" optimize="${_optimize}" includeAntRuntime="false">
			<classpath refid="classpath" />
		</javac>
		
		<!-- copy config files -->
		<copy todir="${stage.build.dest}" overwrite="yes">
			<fileset dir="${stage.build.src}">
				<include name="**/*.*" />
				<!-- Export Java source files and resources or not -->
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>
	<!-- =================================================================== -->
	<!-- 打包成Stage.jar-->
	<!-- =================================================================== -->
	<target name="packStage" depends="compileStage" description="make .jar file">
		<echo message=">>4.开始打包Stage......"/>
		<!-- 删除properties,dat配置文件 （不需要打包进JAR） -->
		<delete file="${stage.build.dest}/resources/config/qqwry.dat" />
		<delete file="${stage.build.dest}/resources/config/masterjdbc.properties" />
		<delete file="${stage.build.dest}/resources/config/mailserver.properties" />
		
		<jar destfile="${buildApp.dest}/${exportStageJarName}.jar" basedir="${stage.build.dest}">
			<exclude name="**/*Test.*" />
			<exclude name="**/Test*.*" />
			<!-- 以下2个NativeDll不打包进JAR -->
			<exclude name="**/newdll.dll" />
			<exclude name="**/serverNetDll.dll" />
		</jar>
	</target>	
		
	<!-- =================================================================== -->
	<!-- 编译Common-->
	<!-- =================================================================== -->
	<target name="compileCommon" depends="preparesrc" description="compile the source files">
		<echo message=">>5.开始编译Common......"/>
		<mkdir dir="${common.build.dest}" />
		<javac srcdir="${common.build.src}" destdir="${common.build.dest}" target="${_target}" debug="${_debug}" encoding="${_encoding}" deprecation="${_deprecation}" optimize="${_optimize}" includeAntRuntime="false">
			<classpath refid="classpath" />
		</javac>
		<!-- copy config files -->
		<copy todir="${common.build.dest}" overwrite="yes">
			<fileset dir="${common.build.src}">
				<include name="**/*.*" />
				<!-- Export Java source files and resources or not -->
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>
	<!-- =================================================================== -->
	<!-- 打包成Common.jar-->
	<!-- =================================================================== -->
	<target name="packCommon" depends="compileCommon" description="make .jar file">
		<echo message=">>5.开始打包SptCommon......"/>
		<!-- 删除masterjdbc.properties配置文件 （不需要打包进JAR） -->
		<delete file="${common.build.dest}/resources/config/masterjdbc.properties" />
		
		<jar destfile="${buildApp.dest}/${exportSptCommonJarName}.jar" basedir="${common.build.dest}">
			<exclude name="**/*Test.*" />
			<exclude name="**/Test*.*" />
		</jar>
	</target>

	<!-- =================================================================== -->
	<!-- 拷贝jdbc.properties配置文件-->
	<!-- =================================================================== -->
	<target name="preparecontext" depends="compileStage">
		<echo message=">>5.发布配置文件......"/>
		<!-- 拷贝jdbc.properties,server.properties配置文件到resources/config目录 -->
		<copy todir="${buildApp.dest}/resources/config" overwrite="yes">
			<fileset dir="${build.src}/resources/config">
				<include name="**/jdbc.properties" />
				<include name="**/server.properties" />
			</fileset>
			<fileset dir="${common.build.dest}/resources/config">
				<include name="**/*.properties" />
			</fileset>
		</copy>
	</target>
	
	<!-- =================================================================== -->
	<!-- 生成启动文件 -->
	<!-- =================================================================== -->
	<target name="makestartup">
		<echo message=">>7.生成启动文件......"/>
	    <exec executable="${tools.dir}/startup_gen.exe">
	         <arg line="${build.dir}/deploy" />
		</exec>
	</target>
</project>