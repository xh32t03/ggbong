<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="       
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
      http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
    
    <!-- 注解支持 -->  	
	<context:annotation-config/>

	<bean id="propertyConfigurer2"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="order" value="2" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="location">
			<value>classpath:config/jdbc.properties</value>
		</property>
	</bean>

	<!-- 数据库连接池 -->  
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="maxActive" value="20" /> 
        <property name="minIdle" value="1" />
        
        <!-- 配置获取连接等待超时的时间60s -->
        <property name="maxWait" value="60000" /> 
        
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
        <property name="minEvictableIdleTimeMillis" value="300000" />  
       
        <property name="validationQuery" value="SELECT 'x'" />  
        <property name="testWhileIdle" value="true" />  
        <property name="testOnBorrow" value="false" />  
        <property name="testOnReturn" value="false" />  
        
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="wall,stat,slf4j" />
        
        <!-- 对于长时间不使用的连接强制关闭  -->
        <property name="removeAbandoned" value="true" />
        <!-- 超过30分钟开始关闭空闲连接 -->
        <property name="removeAbandonedTimeout" value="1800" /> 
        <!-- 关闭abanded连接时输出错误日志 --> 
        <property name="logAbandoned" value="true" />  
    </bean>
    <bean id="local" parent="druidDataSource" init-method="init" destroy-method="close">    
        <property name="url" value="${local.jdbc.url}" />  
        <property name="username" value="${local.jdbc.username}" />  
        <property name="password" value="${local.jdbc.password}" />    
    </bean>
    <bean id="server" parent="druidDataSource" init-method="init" destroy-method="close">    
        <property name="url" value="${jdbc.url}" />  
        <property name="username" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}" />    
    </bean>

	<bean id="dataSource" class="com.autrade.stage.commons.MultiDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="local" key="local"></entry>
				<entry value-ref="server" key="server"></entry>
			</map>
		</property>
		<!-- 默认使用local的数据源 -->
		<property name="defaultTargetDataSource" ref="server"></property>
	</bean>  

	<!-- MyBatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	  	<property name="dataSource" ref="dataSource" />
	  	<property name="configLocation" value="classpath:resources/mybatis/match/myBatisConfig.xml" />
	  	<property name="mapperLocations" value="classpath:resources/mybatis/match/mapper/*.xml" />
	</bean>
	<bean id="matchSqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		autowire="byName">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	<!-- MyBatis -->
	
	<!-- 配置事务管理对象-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 将所有具有@Transactional注解的Bean自动配置为声明式事务支持 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

	<!-- 自定义的拦截器 -->
	<bean id="methodAdvisor" class="com.autrade.spt.common.interceptor.InjectorManager" />

	<aop:config proxy-target-class="true">
		<aop:pointcut id="baseMethods"
			expression="execution(* com.autrade.spt.*.service..*.*(..))" />
		<aop:advisor advice-ref="methodAdvisor" pointcut-ref="baseMethods" />
	</aop:config>
    
    <!-- 以AspectJ方式 定义 AOP -->
	<!-- <aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.*..*.services.*Services.*(..))" advice-ref="txAdvice"/>
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="query*" read-only="true"/>
			<tx:method name="save*" propagation="REQUIRED"/>  
            <tx:method name="delete*" propagation="REQUIRED"/>  
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="commit*" propagation="REQUIRED"/>
            <tx:method name="*" read-only="false"/>
		</tx:attributes>
	</tx:advice> -->
	    
	<!-- 引入Stage固定配置 -->
    <import resource="classpath:resources/config/applicationContext-base.xml" />
    <!-- 引入Master Dao配置 -->
    <import resource="classpath:resources/config/applicationContext-masterdao.xml" />
	<!-- 引入dao层配置 -->
    <import resource="classpath:resources/config/applicationContext-dao.xml" />
    <!-- 引入dxo层配置 -->
    <import resource="classpath:resources/config/applicationContext-dxo.xml" />
    <!-- 引入service层配置 -->
    <import resource="classpath:resources/config/applicationContext-service.xml" />
    <!-- 引入task配置 -->
    <import resource="classpath:resources/config/applicationContext-task.xml" />
</beans>